v <- final[final$skyl3!="M",c(1,2,which(colnames(final)=="skyl3"))]
v$skyl3<-as.numeric(as.character(v$skyl3))
l <- lm(skyl3 ~ Date + CRSDepTime, data=v)
t <- final[final$skyl3 == "M", c(1,2)]
p <- predict(l,t)
cpy$skyl3 <- as.numeric(as.character(cpyl$skyl3))
cpy$skyl3[is.na(cpy$skyl3)]<-p
v <- final[final$skyl3!="M",c(1,2,which(colnames(final)=="skyl3"))]
v$skyl3<-as.numeric(as.character(v$skyl3))
l <- lm(skyl3 ~ Date + CRSDepTime, data=v)
t <- final[final$skyl3 == "M", c(1,2)]
p <- predict(l,t)
cpy$skyl3 <- as.numeric(as.character(cpy$skyl3))
cpy$skyl3[is.na(cpy$skyl3)]<-p
v <- final[final$skyl3!="M",c(1,2,which(colnames(final)=="skyl3"))]
v$skyl3<-as.numeric(as.character(v$skyl3))
l <- lm(skyl3 ~ Date + CRSDepTime, data=v)
t <- final[final$skyl3 == "M", c(1,2)]
p <- predict(l,t)
cpy$skyl3 <- as.numeric(as.character(cpy$skyl3))
cpy$skyl3[is.na(cpy$skyl3)]<-p
v <- final[final$skyl3!="M",c(1,2,which(colnames(final)=="skyl3"))]
v$skyl3<-as.numeric(as.character(v$skyl3))
l <- lm(skyl3 ~ Date + CRSDepTime, data=v)
t <- final[final$skyl3 == "M", c(1,2)]
p <- predict(l,t)
cpy$skyl3 <- as.numeric(as.character(cpy$skyl3))
cpy$skyl3[is.na(cpy$skyl3)]<-p
plot(l)
plogis(p)
plot(p)
summary(p)
sum(final$drct=="M")
v <- final[final$drct!="M",c(1,2,which(colnames(final)=="drct"))]
v$drct<-as.numeric(as.character(v$drct))
l <- lm(drct ~ Date + CRSDepTime, data=v)
t <- final[final$drct == "M", c(1,2)]
p <- predict(l,t)
cpy$drct <- as.numeric(as.character(cpy$drct))
cpy$drct[is.na(cpy$drct)]<-p
plot(p)
summary(p)
summary(as.numeric(as.character(final$drct)))
sum(final$drct=="M")
nrow(p)
str(p)
p
length(p)
backup <- final
rm(cpy)
save.image("~/Development/NASA Clear To Take Off/Prediction Model/env.RData")
source('~/Development/NASA Clear To Take Off/Prediction Model/fitLinearModelForMSLP-M.r')
sum(final=="M")
sum(final$drct=="M")
rm(fitnn)
source('~/Development/NASA Clear To Take Off/Prediction Model/createPartition.r')
nn <- nnet(formula = ANN ~ DepTime + CRSDepTime + ArrDelay + DepDelay + WeatherDelay + LateAircraftDelay + drct + sknt + alti + mslp + vsby + gust + skyl1 + skyl2 + skyl3 + skyl4 , data = train, size = 14, softmax = TRUE , MaxNWts = 15000)
prediction1 <- predict(nn,test)
sumary(prediction1)
summary(prediction1)
sum(test$Delayed==predict1) / nrow(test) *100
sum(test$Delayed==prediction1) / nrow(test) *100
prediction1
str(prediction1)
View(prediction1)
?nnet
table(data.frame(predicted=predict(fitnn, test)[,2] > 0.5,
actual=test$ANN[,2]>0.5))
table(data.frame(predicted=predict(nn, test)[,2] > 0.5,
actual=test$ANN[,2]>0.5))
a <- table(data.frame(predicted=predict(nn, test)[,2] > 0.5,
actual=test$ANN[,2]>0.5))
str(a)
pretty(a)
plot(a)
read.table(a)
as.numeric(TRUE)
class(p)
p
class(prediction1)
prediction1
nrow(test)
nrow(prediction1)
View(prediction1)
View(test)
View(prediction1)
a <- prediction1[,1] > prediction1[,2]
a
sum(a == test$Delayed)/nrow(test) * 100
a <- prediction1[,2] > prediction1[,1]
sum(a == test$Delayed)/nrow(test) * 100
b <- test$Delayed
View(final)
final$ANN
final$ANN[1:10]
colnames(final$ANN)
final$ANN[1:10,]
z <- final$ANN[,2] > final$ANN[,1]
sum(z==final$Delayed)
z <- prediction1[,2] > prediction1[,1]
sum(z==final$Delayed) / 10591 *100
sum(z==test$Delayed) / 10591 *100
sum(z==test$Delayed) / 2118 *100
nn2 <- nnet(formula = ANN ~ DepTime + CRSDepTime + ArrDelay + DepDelay + WeatherDelay + LateAircraftDelay + drct + sknt + alti + mslp + vsby + gust + skyl1 + skyl2 + skyl3 + skyl4 , data = train, size = 12, softmax = TRUE , MaxNWts = 15000)
tree1 <- rpart(formula = Delayed ~ DepTime + CRSDepTime + ArrDelay + DepDelay + WeatherDelay + LateAircraftDelay + drct + sknt + alti + mslp + vsby + gust + skyl1 + skyl2 + skyl3 + skyl4 , data = train, method="class")
library(rpart)
tree1 <- rpart(formula = Delayed ~ DepTime + CRSDepTime + ArrDelay + DepDelay + WeatherDelay + LateAircraftDelay + drct + sknt + alti + mslp + vsby + gust + skyl1 + skyl2 + skyl3 + skyl4 , data = train, method="class")
pT <- predict(tree1, test, type = "class")
str(pT)
pT[1:10]
pT
sum(pT == test$Delayed) / nrow(test) *100
plot(tree1)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
fancyRpartPlot(tree1)
t <- createDataPartition(final$Delayed, p = 0.6, list = FALSE)
train2 <- final[t,]
test2 <- final[-t,]
tree1 <- rpart(formula = Delayed ~ DepTime + CRSDepTime + ArrDelay + DepDelay + WeatherDelay + LateAircraftDelay + drct + sknt + alti + mslp + vsby + gust + skyl1 + skyl2 + skyl3 + skyl4 , data = train2, method="class")
pT <- predict(tree1, test2, type = "class")
sum(pT == test2$Delayed) / nrow(test2) *100
nn2 <- nnet(formula = ANN ~  drct + sknt + alti + mslp + vsby + gust + skyl1 + skyl2 + skyl3 + skyl4 , data = train, size = 12, softmax = TRUE , MaxNWts = 15000, maxit = 300, decay = 0.2)
pANN2 <- predict(nn2, test)
pANN2 <- pANN2[,2] > pANN2[,1]
sum(pANN2==test$Delayed) / nrow(test) *100
nn2 <- nnet(formula = ANN ~  drct + sknt + alti + mslp + vsby + gust + skyl1 + skyl2 + skyl3 + skyl4 , data = train, size = 12, softmax = TRUE , MaxNWts = 15000, maxit = 10000, decay = 0.2)
pANN2 <- predict(nn2, test)
sum(pANN2==test$Delayed) / nrow(test) *100
tree1 <- rpart(formula = Delayed ~ drct + sknt + alti + mslp + vsby + gust + skyl1 + skyl2 + skyl3 + skyl4 , data = train2, method="class")
pT <- predict(tree1, test2, type = "class")
sum(pT == test2$Delayed) / nrow(test2) *100
fancyRpartPlot(tree1)
tree1 <- rpart(formula = Delayed ~ drct + sknt + alti + mslp + vsby + gust + skyl1 + skyl2 + skyl3 + skyl4 + skyc1 + skyc2 + skyc3 + skyc4, data = train2, method="class")
pT <- predict(tree1, test2, type = "class")
sum(pT == test2$Delayed) / nrow(test2) *100
tree1 <- rpart(formula = Delayed ~ drct + sknt + alti + mslp + vsby + gust + skyl1 + skyl2 + skyl3 + skyl4 + skyc1 + skyc2 + skyc3 + skyc4, data = train2, method="class", control = rpart.control(minsplit = 50, cp=0))
pT <- predict(tree1, test2, type = "class")
sum(pT == test2$Delayed) / nrow(test2) *100
tree1 <- rpart(formula = Delayed ~ drct + sknt + alti + mslp + vsby + gust + skyl1 + skyl2 + skyl3 + skyl4 + skyc1 + skyc2 + skyc3 + skyc4, data = train2, method="class", control = rpart.control(minsplit = 10, cp=0))
pT <- predict(tree1, test2, type = "class")
sum(pT == test2$Delayed) / nrow(test2) *100
tree1 <- rpart(formula = Delayed ~ drct + sknt + alti + mslp + vsby + gust + skyl1 + skyl2 + skyl3 + skyl4 + skyc1 + skyc2 + skyc3 + skyc4, data = train2, method="class", control = rpart.control(minsplit = 10))
sum(pT == test2$Delayed) / nrow(test2) *100
tree1 <- rpart(formula = Delayed ~ drct + sknt + alti + mslp + vsby + gust + skyl1 + skyl2 + skyl3 + skyl4 + skyc1 + skyc2 + skyc3 + skyc4, data = train2, method="class", control = rpart.control(minsplit = 25))
sum(pT == test2$Delayed) / nrow(test2) *100
tree1 <- rpart(formula = Delayed ~ drct + sknt + alti + mslp + vsby + gust + skyl1 + skyl2 + skyl3 + skyl4 + skyc1 + skyc2 + skyc3 + skyc4, data = train2, method="class", control = rpart.control(minsplit = 20))
sum(pT == test2$Delayed) / nrow(test2) *100
tree1 <- rpart(formula = Delayed ~ drct + sknt + alti + mslp + vsby + gust + skyl1 + skyl2 + skyl3 + skyl4 + skyc1 + skyc2 + skyc3 + skyc4, data = train2, method="class", control = rpart.control(minsplit = 100))
sum(pT == test2$Delayed) / nrow(test2) *100
tree1 <- rpart(formula = Delayed ~ drct + sknt + alti + mslp + vsby + gust + skyl1 + skyl2 + skyl3 + skyl4 + skyc1 + skyc2 + skyc3 + skyc4, data = train2, method="class")
tree1 <- rpart(formula = Delayed ~ drct + sknt + alti + mslp + vsby + gust + skyl1 + skyl2 + skyl3 + skyl4 + skyc1 + skyc2 + skyc3 + skyc4, data = train2, method="class", control = rpart.control(minsplit = 50, cp=0))
pT <- predict(tree1, test2)
sum(pT==test2$Delayed)/nrow(test2)*100
sum(pT==test2$Delayed) / nrow(test2) *100
sum(pT==test2$Delayed) / nrow(test2)
sum(pT==test2$Delayed)
tree1 <- rpart(formula = Delayed ~ drct + sknt + alti + mslp + vsby + gust + skyl1 + skyl2 + skyl3 + skyl4 + skyc1 + skyc2 + skyc3 + skyc4, data = train2, method="class", control = rpart.control(minsplit = 250, cp=0))
pT <- predict(tree1, test2)
sum(pT==test2$Delayed) / nrow(test2) *100
tree1 <- rpart(formula = Delayed ~ drct + sknt + alti + mslp + vsby + gust + skyl1 + skyl2 + skyl3 + skyl4 + skyc1 + skyc2 + skyc3 + skyc4, data = train2, method="class", control = rpart.control(minsplit = 20, cp=0))
pT <- predict(tree1, test2)
sum(pT==test2$Delayed) / nrow(test2) *100
tree1 <- rpart(formula = Delayed ~ drct + sknt + alti + mslp + vsby + gust + skyl1 + skyl2 + skyl3 + skyl4 + skyc1 + skyc2 + skyc3 + skyc4, data = train2, method="class", control = rpart.control(minsplit = 20))
pT <- predict(tree1, test2)
sum(pT==test2$Delayed) / nrow(test2) *100
tree1 <- rpart(formula = Delayed ~ drct + sknt + alti + mslp + vsby + gust + skyl1 + skyl2 + skyl3 + skyl4 + skyc1 + skyc2 + skyc3 + skyc4, data = train2, method="class")
pT <- predict(tree1, test2)
sum(pT==test2$Delayed) / nrow(test2) *100
rm(pANN2)
rm(prediction1,pT,t,v,x,train,train2,test,test2)
rm(nn2,nn,tree1,z,a,b,c,l,p)
library("e1071", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
source('~/Development/NASA Clear To Take Off/Prediction Model/createPartition.r')
source('~/Development/NASA Clear To Take Off/Prediction Model/createPartition.r')
source('~/Development/NASA Clear To Take Off/Prediction Model/evaluate.r')
svmModel <- svm(formula = Delayed ~ tmpf + dwpf + relh + drct + sknt + alti + mslp + vsby + gust + skyc1 + skyc2 + skyc3 + skyc4 + skyl1 + skyl2 + skyl3 + skyl4, data = train)
svmModel <- svm(formula = Delayed ~ tmpf + dwpf + relh + drct + sknt + alti + mslp + vsby + gust +  skyl1 + skyl2 + skyl3 + skyl4, data = train)
str(train)
train$Delayed <- as.numeric(train$Delayed)
svmModel <- svm(formula = Delayed ~ tmpf + dwpf + relh + drct + sknt + alti + mslp + vsby + gust +  skyl1 + skyl2 + skyl3 + skyl4, data = train)
summary(svmModel)
svmPred <- predict(svmModel, test)
str(svmPred)
summary(svmPred)
svmPred
summary(svmPred)
sum(svmPred < 0.5)
sum(svmPred >= 0.5)
options(digits = 4)
svmModel <- svm(formula = Delayed ~ tmpf + dwpf + relh + drct + sknt + alti + mslp + vsby + gust +  skyl1 + skyl2 + skyl3 + skyl4, data = train, type="class")
install.packages("mlbench")
library(mlbench)
data("Glass")
str(Glass)
Glass[,10]
Glass[,-10]
g <- data.frame( x = 1:10, y = 21:30, x = 31:40)
g[,1]
g[,-1]
g
g <- data.frame( x = 1:10, y = 21:30, z = 31:40)
g
g[,-1]
svmModel <- svm(formula = Delayed ~ tmpf + dwpf + relh + drct + sknt + alti + mslp + vsby + gust +  skyl1 + skyl2 + skyl3 + skyl4, data = train)
svmPred <- predict(svmModel, test[,-which(colnames(test)=="Delayed")])
svmPred
summary(svmPred)
table(pred = svmPred , true = test$Delayed)
tab <- table(pred = svmPred , true = test$Delayed)
tab[1:10,]
which(colnames(train)=="tmpf")
which(colnames(train)=="sknt")
which(colnames(train)=="alti")
which(colnames(train)=="gust")
which(colnames(train)=="skyl1")
which(colnames(train)=="skyl4")
svmModel <- svm(train[,c(28:32,34:37,42:45)], train$Delayed, type = "one-classification")
print(svmModel)
svmPred <- predict(svmModel, subset(test, select = -Delayed))
svmPred <- predict(svmModel, test[,c(28:32,34:37,42:45)])
summary(svmPred)
svmPred
sum(svmPred == test$Delayed)/nrow(test)*100
tree <- rpart(Delayed ~ tmpf+dwpf+relh+drct+sknt+alti+mslp+vsby+gust+skyc1+skyc2+skyc3+skyc4+skyl1+skyl2+skyl3+skyl4, train, type = "class")
tree <- rpart(Delayed ~ tmpf+dwpf+relh+drct+sknt+alti+mslp+vsby+gust+skyc1+skyc2+skyc3+skyc4+skyl1+skyl2+skyl3+skyl4, train, method  = "class")
fancyRpartPlot()
fancyRpartPlot(tree)
treePred <- predict(tree, subset(test, select = -Delayed))
eval(trePred, test$Delayed)
eval(treePred, test$Delayed)
eval(svmPred, test$Delayed)
source('~/Development/NASA Clear To Take Off/Prediction Model/evaluate.r')
source('~/Development/NASA Clear To Take Off/Prediction Model/evaluate.r', local = environment())
eval(svmPred, test$Delayed)
source('~/Development/NASA Clear To Take Off/Prediction Model/evaluate.r', local = environment())
eval(svmPred, test$Delayed)
eval(treePred, test$Delayed)
treePred
str(treePred)
class(test$Delayed)
treePred <- predict(tree, subset(test, select = -Delayed), type = "class")
class(treePred)
levels(treePred)
eval(treePred, test$Delayed)
treePred
sum(treePred==test$Delayed)
sum(treePred==1)
sum(treePred==0)
sum(test$Delayed==1)
sum(test$Delayed==0)
tree <- rpart(formula = Delayed ~ drct + sknt + alti + mslp + vsby + gust + skyl1 + skyl2 + skyl3 + skyl4 + skyc1 + skyc2 + skyc3 + skyc4, data = train, method="class", control = rpart.control(minsplit = 20))
treePred <- predict(tree,test,type = "class")
sum(treePred == test$Delayed)
tree <- rpart(formula = Delayed ~ drct + sknt + alti + mslp + vsby + gust + skyl1 + skyl2 + skyl3 + skyl4, data = train, method="class", control = rpart.control(minsplit = 20))
treePred <- predict(tree,test,type = "class")
sum(treePred == test$Delayed)
tree1 <- rpart(formula = Delayed ~ DepTime + CRSDepTime + ArrDelay + DepDelay + WeatherDelay + LateAircraftDelay + drct + sknt + alti + mslp + vsby + gust + skyl1 + skyl2 + skyl3 + skyl4 , data = train, method="class")
treePred <- predict(tree1, test, type = "class")
sum(treePred==test$Delayed)
treePred
test$Delayed
t <- createDataPartition(final$Delayed, p = 0.6, list = FALSE)
train2 <- final[t,]
test2 <- final[-t,]
tree1 <- rpart(formula = Delayed ~ DepTime + CRSDepTime + ArrDelay + DepDelay + WeatherDelay + LateAircraftDelay + drct + sknt + alti + mslp + vsby + gust + skyl1 + skyl2 + skyl3 + skyl4 , data = train2, method="class")
pT <- predict(tree1, test2, type = "class")
sum(pT == test2$Delayed) / nrow(test2) *100
source('~/Development/NASA Clear To Take Off/Prediction Model/createPartition.r')
tree1 <- rpart(formula = Delayed ~ DepTime + CRSDepTime + ArrDelay + DepDelay + WeatherDelay + LateAircraftDelay + drct + sknt + alti + mslp + vsby + gust + skyl1 + skyl2 + skyl3 + skyl4 , data = train, method="class")
pT <- predict(tree1, test, type = "class")
sum(pT == test2$Delayed) / nrow(test2) *100
tree1 <- rpart(formula = Delayed ~ drct + sknt + alti + mslp + vsby + gust + skyl1 + skyl2 + skyl3 + skyl4 , data = train, method="class")
pT <- predict(tree1, test, type = "class")
sum(pT == test2$Delayed) / nrow(test2) *100
tree1 <- rpart(formula = Delayed ~ tmpf + dwpf + relh + drct + sknt + alti + mslp + vsby + gust + skyl1 + skyl2 + skyl3 + skyl4 , data = train, method="class")
pT <- predict(tree1, test, type = "class")
sum(pT == test2$Delayed) / nrow(test2) *100
tree <- rpart(formula = Delayed ~ tmpf + dwpf + relh + drct + sknt + alti + mslp + vsby , data = train, method="class")
treePred <- predict(tree, test, type = "class")
eval(treePred,test$Delayed)
which(colnames(train)=="tmpf")
which(colnames(train)=="sknt")
which(colnames(train)=="alti")
which(colnames(train)=="gust")
which(colnames(train)=="skyl1")
which(colnames(train)=="skyl4")
svmModel <- svm(train[,c(28:32,34:36)], train$Delayed, type = "one-classification")
print(svmModel)
svmPred <- predict(svmModel, test[,c(28:32,34:37,42:45)])
svmPred <- predict(svmModel, test[,c(28:32,34:37)])
svmPred <- predict(svmModel, test[,c(28:32,34:36)])
eval(svmPred,test$Delayed)
ANNModel <- nnet(formula = ANN ~  tmpf + dwpf + relh + drct + sknt + alti + mslp + vsby , data = train, size = 5, softmax = TRUE)
ANNModel <- nnet(formula = ANN ~  tmpf + dwpf + relh + drct + sknt + alti + mslp + vsby , data = train, size = 5, softmax = TRUE, maxit = 200)
ANNModel <- nnet(formula = ANN ~  tmpf + dwpf + relh + drct + sknt + alti + mslp + vsby , data = train, size = 5, softmax = TRUE, maxit = 50)
ANNModel <- nnet(formula = ANN ~  tmpf + dwpf + relh + drct + sknt + alti + mslp + vsby , data = train, size = 5, softmax = TRUE)
ANNModel <- nnet(formula = ANN ~  tmpf + dwpf + relh + drct + sknt + alti + mslp + vsby , data = train, size = 5, softmax = TRUE)ANNModel <- nnet(formula = ANN ~  tmpf + dwpf + relh + drct + sknt + alti + mslp + vsby , data = train, size = 5, softmax = TRUE)
ANNModel <- nnet(formula = ANN ~  tmpf + dwpf + relh + drct + sknt + alti + mslp + vsby , data = train, size = 5, softmax = TRUE)
rm(ANNModel)
ANNModel <- nnet(ANN ~ tmpf + dwpf + relh + drct + sknt + alti + mslp + vsby, data = train, size = 8, MaxNWts = 15000, softmax = TRUE)
ANNModel <- nnet(ANN ~ tmpf + dwpf + relh + drct + sknt + alti + mslp + vsby, data = train2, size = 8, MaxNWts = 15000, softmax = TRUE)
ANNModel <- nnet(ANN ~ tmpf + dwpf + relh + drct + sknt + alti + mslp + vsby, data = train2, size = 8, softmax = TRUE)
ANNModel <- nnet(ANN ~ tmpf + dwpf + relh + drct + sknt + alti + mslp + vsby, data = train, size = 8, softmax = TRUE)
ANNModel <- nnet(formula = ANN ~  tmpf + dwpf + relh + drct + sknt + alti + mslp + vsby , data = train, size = 5, softmax = TRUE)
ANNPred <- predict(ANNModel, test)
test[1:10,]
ANNPred[1:5,]
ANNPred <- ANNPred[,2] > ANNPred[,1]
eval(ANNPred,test$Delayed)
RndmFrstModel <- randomForest(as.factor(Delayed) ~ tmpf + dwpf + relh + drct + sknt + alti + mslp + vsby, data = train , ntree = 1000, importance = TRUE)
library("randomForest", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
RndmFrstModel <- randomForest(as.factor(Delayed) ~ tmpf + dwpf + relh + drct + sknt + alti + mslp + vsby, data = train , ntree = 1000, importance = TRUE)
RndmFrstPred <- predict(RndmFrstModel, test)
eval(RndmFrstPred,test$Delayed)
View(train)
View(train)
View(test2)
source('~/Development/NASA Clear To Take Off/Prediction Model/ANNClassifier.r')
source('~/Development/NASA Clear To Take Off/Prediction Model/ANNClassifier.r')
source('~/Development/NASA Clear To Take Off/Prediction Model/ANNClassifier.r')
source('~/Development/NASA Clear To Take Off/Prediction Model/ANNClassifier.r')
ANNPred <- predict(ANNModel, test)
ANNPred <- ANNPred[,2] > ANNPred[,1]
eval(ANNPred,test$Delayed)
source('~/Development/NASA Clear To Take Off/Prediction Model/ANNClassifier.r')
source('~/Development/NASA Clear To Take Off/Prediction Model/ANNClassifier.r')
source('~/Development/NASA Clear To Take Off/Prediction Model/ANNClassifier.r')
ANNPred <- predict(ANNModel, test)
ANNPred <- ANNPred[,2] > ANNPred[,1]
eval(ANNPred,test$Delayed)
source('~/Development/NASA Clear To Take Off/Prediction Model/ANNClassifier.r')
ANNPred <- predict(ANNModel, test)
ANNPred <- ANNPred[,2] > ANNPred[,1]
eval(ANNPred,test$Delayed)
source('~/Development/NASA Clear To Take Off/Prediction Model/ANNClassifier.r')
ANNPred <- predict(ANNModel, test)
ANNPred <- ANNPred[,2] > ANNPred[,1]
eval(ANNPred,test$Delayed)
source('~/Development/NASA Clear To Take Off/Prediction Model/ANNClassifier.r')
ANNPred <- predict(ANNModel, test)
ANNPred <- ANNPred[,2] > ANNPred[,1]
eval(ANNPred,test$Delayed)
source('~/Development/NASA Clear To Take Off/Prediction Model/ANNClassifier.r')
ANNPred <- predict(ANNModel, test)
ANNPred <- ANNPred[,2] > ANNPred[,1]
eval(ANNPred,test$Delayed)
source('~/Development/NASA Clear To Take Off/Prediction Model/RandomForestClassifier.r')
RndmFrstPred <- predict(RndmFrstModel, test)
eval(RndmFrstPred,test$Delayed)
source('~/Development/NASA Clear To Take Off/Prediction Model/svmClassifier.r')
svmPred <- predict(svmModel, test[,c(28:30,32,34,36)])
eval(svmPred,test$Delayed)
source('~/Development/NASA Clear To Take Off/Prediction Model/DesisionTreeClassifier.r')
treePred <- predict(tree, test, type = "class")
eval(treePred,test$Delayed)
source('~/Development/NASA Clear To Take Off/Prediction Model/createPartition.r')
source('~/Development/NASA Clear To Take Off/Prediction Model/ANNClassifier.r')
ANNPred <- predict(ANNModel, test)
ANNPred <- ANNPred[,2] > ANNPred[,1]
eval(ANNPred,test$Delayed)
source('~/Development/NASA Clear To Take Off/Prediction Model/ANNClassifier.r')
ANNPred <- predict(ANNModel, test)
ANNPred <- ANNPred[,2] > ANNPred[,1]
eval(ANNPred,test$Delayed)
source('~/Development/NASA Clear To Take Off/Prediction Model/ANNClassifier.r')
ANNPred <- predict(ANNModel, test)
ANNPred <- ANNPred[,2] > ANNPred[,1]
eval(ANNPred,test$Delayed)
source('~/Development/NASA Clear To Take Off/Prediction Model/RandomForestClassifier.r')
RndmFrstPred <- predict(RndmFrstModel, test)
eval(RndmFrstPred,test$Delayed)
source('~/Development/NASA Clear To Take Off/Prediction Model/RandomForestClassifier.r')
RndmFrstPred <- predict(RndmFrstModel, test)
eval(RndmFrstPred,test$Delayed)
source('~/Development/NASA Clear To Take Off/Prediction Model/svmClassifier.r')
svmPred <- predict(svmModel, test[,c(28:30,32,34,36)])
eval(svmPred,test$Delayed)
source('~/Development/NASA Clear To Take Off/Prediction Model/DesisionTreeClassifier.r')
treePred <- predict(tree, test, type = "class")
eval(treePred,test$Delayed)
Accuracy <- data.frame(SVM = 49.48, DT = 61.47, RF = 63.31, ANN = 60.76)
plot(Accuracy, 1:100.0,type = "l" )
plot(Accuracy, 1:100.0 )
Accuracy <- data.frame(Accuracy = c(49.48,61.47,63.31,60.76), Model = c("SVM", "DT", "RF", "ANN"))
plot(Accuracy, type="l")
Acc <- Accuracy[,c(2,1)]
plot(Acc, type="l")
ACC
Acc
plot(Acc)
hist(Acc)
hist(Acc$Accuracy,Acc$Model)
hist(Acc$Accuracy)
boxplot(Acc)
barplot(Acc)
barplot(Acc$Accuracy)
barplot(Acc$Accuracy,Acc$Model)
plot(Acc$Accuracy)
plot(Acc$Accuracy, type = "s")
plot(Acc$Accuracy, type = "S")
plot(Acc$Accuracy, type = "b")
plot(Acc$Accuracy, type = "l")
plot(Acc$Accuracy, type = "l", xlab = "Model", ylab = "Accuracy")
plot(Acc$Accuracy, type = "l", xlab = "Model", ylab = "Accuracy", lwd=0.5)
plot(Acc$Accuracy, type = "l", xlab = "Model", ylab = "Accuracy", lwd=2)
plot(Acc$Accuracy, type = "l", xlab = "Model", ylab = "Accuracy", lwd=2, col = c("Red","Blue","Greeen","Yellow"))
plot(Acc$Accuracy, type = "l", xlab = "Model", ylab = "Accuracy", lwd=2, col = c("Red","Blue","Green","Yellow"))
plot(Acc$Accuracy, type = "l", xlab = "Model", ylab = "Accuracy", lwd=c(2,2,2,2), col = c("Red","Blue","Green","Yellow"))
plot(Acc$Accuracy, type = "b", xlab = "Model", ylab = "Accuracy", lwd=c(2,2,2,2), col = c("Red","Blue","Green","Yellow"))
plot(Acc$Accuracy, type = "b", xlab = "Model", ylab = "Accuracy", lwd=c(2,2,2,2), col = c("Black","Red","Blue","Green","Yellow"))
plot(Acc$Accuracy, type = "b", xlab = "Model", ylab = "Accuracy", lwd=c(2,2,2,2), col = c("Red","Blue","Green","Yellow"))
plot(Acc$Accuracy, type = "b", xlab = "Model", ylab = "Accuracy", lwd=c(2,2,2,2), col = c("Red","Blue","Green","Yellow"), lty = c("SVM","DT","RF","ANN"))
plot(Acc$Accuracy, type = "b", xlab = "Model", ylab = "Accuracy", col = c("Red","Blue","Green","Yellow"), lty = c("SVM","DT","RF","ANN"))
plot(Acc$Accuracy, type = "b", ylab = "Accuracy", xlab="Model")
lines(Acc$Accuracy[1], type = "l", col="Red")
plot(Acc$Accuracy, type = "b", ylab = "Accuracy", xlab="Model")
lines(Acc$Accuracy[1], type = "l", col="Red")
lines(Acc$Accuracy.1, type = "l", col="Red")
lines(Acc$Accuracy.1:1.5, type = "l", col="Red")
lines(Acc$Accuracy.(1:1.5), type = "l", col="Red")
lines(Acc$Accuracy.1:Acc$Accuracy1.5, type = "l", col="Red")
legend('topright', names(a)[-1] ,
lty=1, col=c('red', 'blue', 'green',' brown'), bty='n', cex=.75)
legend('topright', names(Acc)[-1] ,
lty=1, col=c('red', 'blue', 'green',' brown'), bty='n', cex=.75)
legend('topright', names(Acc)[-1] ,
lty=1, col=c("Cyan"), bty='n', cex=.75)
legend('topright', names(Acc)[-1] ,
lty=1, col=c("Dark Blue"), bty='n', cex=.75)
lines(Acc$Accuracy, type = "l", col="Red")
points(Acc$Accuracy, col = c("Red", "Blue", "Green", "Black"))
points(Acc$Accuracy, col = c("Red", "Blue", "Green", "Purple"))
points(Acc$Accuracy, col = c("Red", "Blue", "Green", "Brown"))
lines(Acc$Accuracy.1:Acc$Accuracy1.5, type = "b", col="Red")
lines(Acc$Accuracy, type = "b", col="Red")
lines(Acc$Accuracy, type = "l", col="Red")
plot(Acc$Accuracy, type = "b", ylab = "Accuracy", xlab="Model")
points(Acc$Accuracy,col=c("Red","Blue","green","brown"))
points(Acc$Accuracy,col=c("Red","Blue","green","brown"), pch=20)
points(Acc$Accuracy,col=c("Red","Blue","green","brown"), pch=19)
points(Acc$Accuracy,col=c("Red","Blue","green","brown"), pch=20)
points(Acc$Accuracy,col=c("Red","Blue","green","brown"), pch=21)
points(Acc$Accuracy,col=c("Red","Blue","green","brown"), pch=22)
points(Acc$Accuracy,col=c("Red","Blue","green","brown"), pch=23)
points(Acc$Accuracy,col=c("Red","Blue","green","brown"), pch=24)
points(Acc$Accuracy,col=c("Red","Blue","green","brown"), pch=25)
points(Acc$Accuracy,col=c("Red","Blue","green","brown"), pch=26)
points(Acc$Accuracy,col=c("Red","Blue","green","brown"), pch=23)
points(Acc$Accuracy,col=c("Red","Blue","green","brown"), pch=23)
points(Acc$Accuracy,col=c("Red","Blue","green","brown"), pch=20)
points(Acc$Accuracy, pch=23)
plot(Acc$Accuracy,type = "b", xlab = "Model", ylab = "Accuracy")
points(Acc$Accuracy, pch=23)
plot(Acc$Accuracy,type = "b", xlab = "Model", ylab = "Accuracy", pch=23)
plot(Acc$Accuracy,type = "b", xlab = "Model", ylab = "Accuracy", pch=19)
plot(Acc$Accuracy,type = "b", xlab = "Model", ylab = "Accuracy", pch=20)
plot(Acc$Accuracy,type = "b", xlab = "Model", ylab = "Accuracy", pch=21)
plot(Acc$Accuracy,type = "b", xlab = "Model", ylab = "Accuracy", pch=22)
plot(Acc$Accuracy,type = "b", xlab = "Model", ylab = "Accuracy", pch=23)
plot(Acc$Accuracy,type = "b", xlab = "Model", ylab = "Accuracy", pch=24)
plot(Acc$Accuracy,type = "b", xlab = "Model", ylab = "Accuracy", pch=25)
plot(Acc$Accuracy,type = "b", xlab = "Model", ylab = "Accuracy", pch=22)
plot(Acc$Accuracy,type = "b", xlab = "Model", ylab = "Accuracy", pch=20)
plot(Acc$Accuracy,type = "b", xlab = "Model", ylab = "Accuracy", pch=19)
points(Acc$Accuracy, col=c("Red", 'Blue','Purple','Brown'))
plot(Acc$Accuracy,type = "b", xlab = "Model", ylab = "Accuracy", pch=19,col=c("Red", 'Blue','Purple','Brown'))
plot(Acc$Accuracy,type = "b", xlab = "Model", ylab = "Accuracy", pch=19,col=c("Red", 'Blue','Purple','Brown'), lwd=2)
plot(Acc$Accuracy,type = "b", xlab = "Model", ylab = "Accuracy", pch=19,col=c("Red", 'Blue','Purple','Brown'), lwd=2, col="Black")
lines(Acc$Accuracy,col="Black")
plot(Acc$Accuracy,type = "b", xlab = "Model", ylab = "Accuracy", pch=19,col=c("Red", 'Blue','Purple','Brown'), lwd=c(2,2,2,2))
lines(Acc$Accuracy, col=c("Black"))
points(Acc$Accuracy,col=c("Red", 'Blue','Purple','Brown'))
plot(Acc$Accuracy,type = "b", xlab = "Model", ylab = names(Acc$Model), pch=19,col=c("Red", 'Blue','Purple','Brown'), lwd=c(2,2,2,2))
plot(Acc$Accuracy,type = "b", xlab = "Model", ylab = unique(Acc$Model), pch=19,col=c("Red", 'Blue','Purple','Brown'), lwd=c(2,2,2,2))
plot(Acc$Accuracy,type = "b", xlab = unique(Acc$Model), ylab = unique(Acc$Model), pch=19,col=c("Red", 'Blue','Purple','Brown'), lwd=c(2,2,2,2))
rm(test2.train2)
rm(test2,train2)
rm(Glass)
rm(g)
rm(pT,tab,tree1)
plot.nnet(ANNModel)
par(mar=numeric(4),mfrow=c(1,2),family='serif')
plot(ANNModel,nid=F)
library(devtools)
source_url('https://gist.githubusercontent.com/fawda123/7471137/raw/466c1474d0a505ff044412703516c34f1a4684a5/nnet_plot_update.r')
plot.nnet(ANNModel)
plot(ANNModel)
source('~/Development/NASA Clear To Take Off/Prediction Model/svmClassifier.r')
print(svmModel)
svmPred <- predict(svmModel, test[,c(28:30,32,34,36)])
eval(svmPred,test$Delayed)
source('~/Development/NASA Clear To Take Off/Prediction Model/DesisionTreeClassifier.r')
source('~/Development/NASA Clear To Take Off/Prediction Model/DesisionTreeClassifier.r')
treePred <- predict(tree, test, type = "class")
eval(treePred,test$Delayed)
fancyRpartPlot(tree)
source('~/Development/NASA Clear To Take Off/Prediction Model/ANNClassifier.r')
ANNPred <- predict(ANNModel, test)
ANNPred <- ANNPred[,2] > ANNPred[,1]
eval(ANNPred,test$Delayed)
source('~/Development/NASA Clear To Take Off/Prediction Model/RandomForestClassifier.r')
RndmFrstPred <- predict(RndmFrstModel, test)
eval(RndmFrstPred,test$Delayed)
source('~/Development/NASA Clear To Take Off/Prediction Model/createPartition.r')
source('~/Development/NASA Clear To Take Off/Prediction Model/RandomForestClassifier.r')
RndmFrstPred <- predict(RndmFrstModel, test)
eval(RndmFrstPred,test$Delayed)
source('~/Development/NASA Clear To Take Off/Prediction Model/ANNClassifier.r')
x <- c(2,4,6,8,10,12,14,16,18,20)
summary(x)
